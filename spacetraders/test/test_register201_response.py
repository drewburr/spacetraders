# coding: utf-8

"""
    SpaceTraders API

    SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   

    The version of the OpenAPI document: 2.0.0
    Contact: joel@spacetraders.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from client.models.register201_response import Register201Response

class TestRegister201Response(unittest.TestCase):
    """Register201Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Register201Response:
        """Test Register201Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Register201Response`
        """
        model = Register201Response()
        if include_optional:
            return Register201Response(
                data = client.models.register_201_response_data.register_201_response_data(
                    agent = client.models.agent.Agent(
                        account_id = '0', 
                        symbol = '012', 
                        headquarters = '0', 
                        credits = 56, 
                        starting_faction = '0', 
                        ship_count = 56, ), 
                    contract = client.models.contract.Contract(
                        id = '0', 
                        faction_symbol = '0', 
                        type = 'PROCUREMENT', 
                        terms = client.models.contract_terms.ContractTerms(
                            deadline = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            payment = client.models.contract_payment.ContractPayment(
                                on_accepted = 56, 
                                on_fulfilled = 56, ), 
                            deliver = [
                                client.models.contract_deliver_good.ContractDeliverGood(
                                    trade_symbol = '0', 
                                    destination_symbol = '0', 
                                    units_required = 56, 
                                    units_fulfilled = 56, )
                                ], ), 
                        accepted = True, 
                        fulfilled = True, 
                        expiration = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        deadline_to_accept = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    faction = client.models.faction.Faction(
                        symbol = 'COSMIC', 
                        name = '0', 
                        description = '0', 
                        headquarters = '0', 
                        traits = [
                            client.models.faction_trait.FactionTrait(
                                symbol = 'BUREAUCRATIC', 
                                name = '', 
                                description = '', )
                            ], 
                        is_recruiting = True, ), 
                    ship = client.models.ship.Ship(
                        symbol = '', 
                        registration = client.models.ship_registration.ShipRegistration(
                            name = '0', 
                            faction_symbol = '0', 
                            role = 'FABRICATOR', ), 
                        nav = client.models.ship_nav.ShipNav(
                            system_symbol = '0', 
                            waypoint_symbol = '0', 
                            route = client.models.ship_nav_route.ShipNavRoute(
                                destination = client.models.ship_nav_route_waypoint.ShipNavRouteWaypoint(
                                    symbol = '0', 
                                    type = 'PLANET', 
                                    system_symbol = '0', 
                                    x = 56, 
                                    y = 56, ), 
                                origin = client.models.ship_nav_route_waypoint.ShipNavRouteWaypoint(
                                    symbol = '0', 
                                    type = 'PLANET', 
                                    system_symbol = '0', 
                                    x = 56, 
                                    y = 56, ), 
                                departure_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                arrival = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            status = 'IN_TRANSIT', 
                            flight_mode = 'CRUISE', ), 
                        crew = client.models.ship_crew.ShipCrew(
                            current = 56, 
                            required = 56, 
                            capacity = 56, 
                            rotation = 'STRICT', 
                            morale = 0, 
                            wages = 0, ), 
                        frame = client.models.ship_frame.ShipFrame(
                            symbol = 'FRAME_PROBE', 
                            name = '', 
                            description = '', 
                            condition = 0, 
                            module_slots = 0, 
                            mounting_points = 0, 
                            fuel_capacity = 0, 
                            requirements = client.models.ship_requirements.ShipRequirements(
                                power = 56, 
                                slots = 56, ), ), 
                        reactor = client.models.ship_reactor.ShipReactor(
                            symbol = 'REACTOR_SOLAR_I', 
                            name = '', 
                            description = '', 
                            condition = 0, 
                            power_output = 1, 
                            requirements = client.models.ship_requirements.ShipRequirements(
                                power = 56, 
                                slots = 56, ), ), 
                        engine = client.models.ship_engine.ShipEngine(
                            symbol = 'ENGINE_IMPULSE_DRIVE_I', 
                            name = '', 
                            description = '', 
                            condition = 0, 
                            speed = 1, 
                            requirements = , ), 
                        cooldown = client.models.cooldown.Cooldown(
                            ship_symbol = '0', 
                            total_seconds = 0, 
                            remaining_seconds = 0, 
                            expiration = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        modules = [
                            client.models.ship_module.ShipModule(
                                symbol = 'MODULE_MINERAL_PROCESSOR_I', 
                                capacity = 0, 
                                range = 0, 
                                name = '', 
                                description = '', 
                                requirements = , )
                            ], 
                        mounts = [
                            client.models.ship_mount.ShipMount(
                                symbol = 'MOUNT_GAS_SIPHON_I', 
                                name = '', 
                                description = '', 
                                strength = 0, 
                                deposits = [
                                    'QUARTZ_SAND'
                                    ], 
                                requirements = , )
                            ], 
                        cargo = client.models.ship_cargo.ShipCargo(
                            capacity = 0, 
                            units = 0, 
                            inventory = [
                                client.models.ship_cargo_item.ShipCargoItem(
                                    symbol = 'PRECIOUS_STONES', 
                                    name = '', 
                                    description = '', 
                                    units = 1, )
                                ], ), 
                        fuel = client.models.ship_fuel.ShipFuel(
                            current = 0, 
                            capacity = 0, 
                            consumed = client.models.ship_fuel_consumed.ShipFuel_consumed(
                                amount = 0, 
                                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), ), ), 
                    token = '', )
            )
        else:
            return Register201Response(
                data = client.models.register_201_response_data.register_201_response_data(
                    agent = client.models.agent.Agent(
                        account_id = '0', 
                        symbol = '012', 
                        headquarters = '0', 
                        credits = 56, 
                        starting_faction = '0', 
                        ship_count = 56, ), 
                    contract = client.models.contract.Contract(
                        id = '0', 
                        faction_symbol = '0', 
                        type = 'PROCUREMENT', 
                        terms = client.models.contract_terms.ContractTerms(
                            deadline = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            payment = client.models.contract_payment.ContractPayment(
                                on_accepted = 56, 
                                on_fulfilled = 56, ), 
                            deliver = [
                                client.models.contract_deliver_good.ContractDeliverGood(
                                    trade_symbol = '0', 
                                    destination_symbol = '0', 
                                    units_required = 56, 
                                    units_fulfilled = 56, )
                                ], ), 
                        accepted = True, 
                        fulfilled = True, 
                        expiration = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        deadline_to_accept = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    faction = client.models.faction.Faction(
                        symbol = 'COSMIC', 
                        name = '0', 
                        description = '0', 
                        headquarters = '0', 
                        traits = [
                            client.models.faction_trait.FactionTrait(
                                symbol = 'BUREAUCRATIC', 
                                name = '', 
                                description = '', )
                            ], 
                        is_recruiting = True, ), 
                    ship = client.models.ship.Ship(
                        symbol = '', 
                        registration = client.models.ship_registration.ShipRegistration(
                            name = '0', 
                            faction_symbol = '0', 
                            role = 'FABRICATOR', ), 
                        nav = client.models.ship_nav.ShipNav(
                            system_symbol = '0', 
                            waypoint_symbol = '0', 
                            route = client.models.ship_nav_route.ShipNavRoute(
                                destination = client.models.ship_nav_route_waypoint.ShipNavRouteWaypoint(
                                    symbol = '0', 
                                    type = 'PLANET', 
                                    system_symbol = '0', 
                                    x = 56, 
                                    y = 56, ), 
                                origin = client.models.ship_nav_route_waypoint.ShipNavRouteWaypoint(
                                    symbol = '0', 
                                    type = 'PLANET', 
                                    system_symbol = '0', 
                                    x = 56, 
                                    y = 56, ), 
                                departure_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                arrival = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            status = 'IN_TRANSIT', 
                            flight_mode = 'CRUISE', ), 
                        crew = client.models.ship_crew.ShipCrew(
                            current = 56, 
                            required = 56, 
                            capacity = 56, 
                            rotation = 'STRICT', 
                            morale = 0, 
                            wages = 0, ), 
                        frame = client.models.ship_frame.ShipFrame(
                            symbol = 'FRAME_PROBE', 
                            name = '', 
                            description = '', 
                            condition = 0, 
                            module_slots = 0, 
                            mounting_points = 0, 
                            fuel_capacity = 0, 
                            requirements = client.models.ship_requirements.ShipRequirements(
                                power = 56, 
                                slots = 56, ), ), 
                        reactor = client.models.ship_reactor.ShipReactor(
                            symbol = 'REACTOR_SOLAR_I', 
                            name = '', 
                            description = '', 
                            condition = 0, 
                            power_output = 1, 
                            requirements = client.models.ship_requirements.ShipRequirements(
                                power = 56, 
                                slots = 56, ), ), 
                        engine = client.models.ship_engine.ShipEngine(
                            symbol = 'ENGINE_IMPULSE_DRIVE_I', 
                            name = '', 
                            description = '', 
                            condition = 0, 
                            speed = 1, 
                            requirements = , ), 
                        cooldown = client.models.cooldown.Cooldown(
                            ship_symbol = '0', 
                            total_seconds = 0, 
                            remaining_seconds = 0, 
                            expiration = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        modules = [
                            client.models.ship_module.ShipModule(
                                symbol = 'MODULE_MINERAL_PROCESSOR_I', 
                                capacity = 0, 
                                range = 0, 
                                name = '', 
                                description = '', 
                                requirements = , )
                            ], 
                        mounts = [
                            client.models.ship_mount.ShipMount(
                                symbol = 'MOUNT_GAS_SIPHON_I', 
                                name = '', 
                                description = '', 
                                strength = 0, 
                                deposits = [
                                    'QUARTZ_SAND'
                                    ], 
                                requirements = , )
                            ], 
                        cargo = client.models.ship_cargo.ShipCargo(
                            capacity = 0, 
                            units = 0, 
                            inventory = [
                                client.models.ship_cargo_item.ShipCargoItem(
                                    symbol = 'PRECIOUS_STONES', 
                                    name = '', 
                                    description = '', 
                                    units = 1, )
                                ], ), 
                        fuel = client.models.ship_fuel.ShipFuel(
                            current = 0, 
                            capacity = 0, 
                            consumed = client.models.ship_fuel_consumed.ShipFuel_consumed(
                                amount = 0, 
                                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), ), ), 
                    token = '', ),
        )
        """

    def testRegister201Response(self):
        """Test Register201Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
